import { Region } from 'react-native-maps';
import { MedicalFacility } from '../types/medical';
import { Dimensions } from 'react-native';

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
const toRad = (degrees: number): number => {
  return degrees * (Math.PI / 180);
};

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
export const calculateDistance = (
  lat1: number,
  lon1: number,
  lat2: number,
  lon2: number
): number => {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è
export const getMarkerColor = (type: MedicalFacility['type']): string => {
  switch (type) {
    case 'hospital':
      return '#FF3B30'; // –ö—Ä–∞—Å–Ω—ã–π
    case 'clinic':
      return '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π
    case 'pharmacy':
      return '#FF9500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    case 'emergency':
      return '#FF2D55'; // –†–æ–∑–æ–≤—ã–π
    default:
      return '#3A7BFF'; // –°–∏–Ω–∏–π
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
export const getMarkerIcon = (type: MedicalFacility['type']): string => {
  switch (type) {
    case 'hospital':
      return 'üè•';
    case 'clinic':
      return 'üë®‚Äç‚öïÔ∏è';
    case 'pharmacy':
      return 'üíä';
    case 'emergency':
      return 'üöë';
    default:
      return 'üìç';
  }
};

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –£–∫—Ä–∞–∏–Ω—ã (–ö–∏–µ–≤)
export const DEFAULT_REGION: Region = {
  latitude: 50.4501, // –ö–∏–µ–≤
  longitude: 30.5234,
  latitudeDelta: 0.0922,
  longitudeDelta: 0.0421,
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∫–∞—Ä—Ç—ã
export const getInitialRegion = (facilities: MedicalFacility[]): Region => {
  if (facilities.length === 0) {
    return DEFAULT_REGION;
  }

  const latitudes = facilities.map(f => f.coordinates.latitude);
  const longitudes = facilities.map(f => f.coordinates.longitude);

  const minLat = Math.min(...latitudes);
  const maxLat = Math.max(...latitudes);
  const minLng = Math.min(...longitudes);
  const maxLng = Math.max(...longitudes);

  return {
    latitude: (minLat + maxLat) / 2,
    longitude: (minLng + maxLng) / 2,
    latitudeDelta: (maxLat - minLat) * 1.5,
    longitudeDelta: (maxLng - minLng) * 1.5,
  };
};

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Ä–∞–¥–∏—É—Å—É
export const filterByRadius = (
  facilities: MedicalFacility[],
  userLocation: { latitude: number; longitude: number },
  radius: number
): MedicalFacility[] => {
  return facilities.filter(facility => {
    const distance = calculateDistance(
      userLocation.latitude,
      userLocation.longitude,
      facility.coordinates.latitude,
      facility.coordinates.longitude
    );
    return distance <= radius / 1000; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
  });
};

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
export const sortByDistance = (
  facilities: MedicalFacility[],
  userLocation: { latitude: number; longitude: number }
): MedicalFacility[] => {
  return [...facilities].sort((a, b) => {
    const distanceA = calculateDistance(
      userLocation.latitude,
      userLocation.longitude,
      a.coordinates.latitude,
      a.coordinates.longitude
    );
    const distanceB = calculateDistance(
      userLocation.latitude,
      userLocation.longitude,
      b.coordinates.latitude,
      b.coordinates.longitude
    );
    return distanceA - distanceB;
  });
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
export const getOptimalZoomRadius = (points: { latitude: number; longitude: number }[]): number => {
  if (points.length <= 1) {
    return 1000; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
  }

  const latitudes = points.map(p => p.latitude);
  const longitudes = points.map(p => p.longitude);

  const minLat = Math.min(...latitudes);
  const maxLat = Math.max(...latitudes);
  const minLng = Math.min(...longitudes);
  const maxLng = Math.max(...longitudes);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
  const diagonalDistance = calculateDistance(minLat, minLng, maxLat, maxLng);

  // –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö, —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∑—É–º–∞
  return diagonalDistance * 1000 * 1.2;
};

// –†–∞—Å—á–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
export const estimateTravelTime = (
  startLat: number,
  startLng: number,
  endLat: number,
  endLng: number,
  mode: 'walking' | 'driving' | 'transit' = 'driving'
): number => {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const distance = calculateDistance(startLat, startLng, endLat, endLng);

  // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –∫–º/—á
  let averageSpeed;
  switch (mode) {
    case 'walking':
      averageSpeed = 5; // 5 –∫–º/—á
      break;
    case 'transit':
      averageSpeed = 20; // 20 –∫–º/—á
      break;
    case 'driving':
    default:
      averageSpeed = 40; // 40 –∫–º/—á –≤ –≥–æ—Ä–æ–¥–µ
      break;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
  return Math.ceil((distance / averageSpeed) * 60);
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
export const formatTravelTime = (minutes: number): string => {
  if (minutes < 1) {
    return '–º–µ–Ω–µ–µ 1 –º–∏–Ω';
  }

  if (minutes < 60) {
    return `${minutes} –º–∏–Ω`;
  }

  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;

  if (remainingMinutes === 0) {
    return `${hours} —á`;
  }

  return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
export const getClusterSize = (count: number): number => {
  const { width } = Dimensions.get('window');
  const baseSize = width * 0.12; // 12% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞

  if (count < 10) {
    return baseSize;
  } else if (count < 50) {
    return baseSize * 1.2;
  } else if (count < 100) {
    return baseSize * 1.4;
  } else {
    return baseSize * 1.6;
  }
};

// –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const categorizeMarkersByType = (markers: MedicalFacility[]): Record<string, number> => {
  const categories: Record<string, number> = {
    hospital: 0,
    clinic: 0,
    pharmacy: 0,
    emergency: 0,
    other: 0,
  };

  markers.forEach(marker => {
    if (marker.type in categories) {
      categories[marker.type]++;
    } else {
      categories.other++;
    }
  });

  return categories;
};
